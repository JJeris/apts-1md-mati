algo:
1.) Ienāk klients:11, 1, 10.
2.) Mēs viņam dodam barberi, kurš ir viss ilgāk bijis bez darba.
A






Barber list and time problem:
- need to have another variable. DONE
- make outputlist element DONE
    - Each loop iteration simply makes a new element in outputlist. DONE
- both barber and client list pointers.
    - If barber at the start


1. Laiks nedrīkst pārsniegt 2 000 000 000.

2. Katram barberim ir jādodas atpūsties, kad laika momenta simtnieku pozīcijas cipars sartīt ar friziera numuru, tas ir frizierim ar numur 5 jāatpūšas laikos 500-599, 1500-1599, 2500-2599 utt.
2.1. Pārtraukuma laikā frizierim ir kategoriski aizliegts apkalpot klientu. Bez tam klienta apkalpošanu nedrīkst 	sadalīt vairākos etapos, t.i. apkalpot drīkst tikai viens frizieris un bez jebkādiem pārtraukumiem. Tātad frizieris nedrīkst sākt apkalpot klientu, ja to nevar paspēt līdz pārtraukuma brīdim.

3. Klients ir jāapkalpo nekavējoties, ja eksistē brīvs frizieris un tam nav nekādu ierobežojumu veikt šo darbu. 
4. Frizierim, beidzot darbu pie kārtējā klienta, ar nākošo laika momentu jāmēģina apkalpot kādu klientu.
5....
6. Klienti gaida stingrā (godīgā) rindā. Vienā laika momentā var ierasties tikai viens klients. Reģistrators uzreiz nosaka klientam ierašanās kārtas numuru [1..200 000] un pakalpojuma laiku [1..900].

7. ...


Description

In a large city (several million inhabitants, but not more than a billion) there is one single barbershop with a small number of barbers (1-9). Each barber has his own number [1.. 9], to make it easier to organise the barbers work. In the barbershop, the time is counted in incremental time units from 1 till 2000000000000, and the time counting starts from the moment that the barbershop opens.

Even though there are a lot of customers, every barber has to go on a break. The barber rests when the digit in the hundredths place position in of the time variable corresponds to the the barbers own number, i.e. the barber with the number 5 will rest when the time variable is [500-599], [1500-1599], [2500.. 2599], etc. During the break, the barber is categorically banned from serving a customer. In addition, if there is an unattended customer, a barber can't service him, unless he can do it before his break time starts. Therefore, the barber should not start serving the customer if it cannot be reached until the break.

The customer must be served immediately if there is a free barber and has no restrictions on doing this job. The barber must try to serve a customer with the next moment of time when he is finished. 

More accurate specification: customer C1 arrives at time T1 and needs service time S1 (service time means that it will take S1 amount of time, for the customer to be serviced). There's a free barber B1. Accordingly, the service takes place at the time interval of [T1...T1+(S1-1)]. The service is finished at the time: T1 + S1-1. If client C2 has already arrived before or at exactly at the time moment T1 + S1, then the barber B1 can start servicing client C2 at the time T1 + S1.



Customers are waiting in an honest and "tight" (meaning punctual) line. Only one client can come in at a certain time momemt. The receptionist (in the case of C++ and the context of this exercise, an algorithm) shall immediately determine the customers number (which corresponds to the customer order of arrival) thats between 1 and 200000 and the needed service time for the customers, that's between 1-900.

If there is an unserviced customer and several free barbers at the same time, then: preference is for a barber who has been without a customer for the longest amount of time (measured from the end of last serviced customer). Also, if two or more barbers have been waiting the same amount of time, then the barber who has the smaller number services the customer.

Knowing the arrival time, the number (customers number) and service time (duration of the service) of the customer, output the end of service moments time, the barbers number (who sercived the customer) and the customers number (the number of the customer, who was serviced). Outputting should be done sequentially, as in, according to the times growing order. If several clients service ends at the exact same time moment, then the result of these services are outputted according to the growing order of the barbers (that serviced these customers) numbers.

In terms of customer arrival times, customer serial numbers and service durations, print end-of-service moments, service barber number and customer serial number. Printing should be performed in the time increment sequence. If you stop serving multiple customers at one point of time, the results should be printed in the order of the number of barbers.


For the c++ program, we take in the input from a text file called hair.in and write the output inside another text file called hair.out.
The example input would look as follows:
2
11 1 10
21 2 50
31 3 20
0

The first line is the number of barbers inside the barbershop. The number is between 1 and 9. In the case of the example, there are 2 barbers in the barbershop.
The second line represents data about a customer: the first number is the arrival time of the customer (thats between 1 and 2000000000), the second number is the customers number (thats between 1 and 200000) and the third number is the needed service time (thats between 1 and 900).
This structure also applies to the third and fourth line.
The fifth line starts with a "0", which means, that the file has ended. This means, that whenever a line starts with a zero as the first number, the file has ended.

The output would be written to the file hair.out.
The example input would look as follows:
20 1 1
50 1 3
70 2 2

The first line represents the output: the first number is the end of service time (that would be calculated by T1+S1-1 formula, where T1 is the arrival time and S1 is the needed service time. Note, T1+S1-1 is T1 plus S1 minus 1. So, 11+10-1=20, which equals the first number of the first line.
The second number represents the barbers number (that serviced the customer), that's between 1 and 9. And the third line represents the clients number (who was serviced by the barber) that's between 1 and 200000. This structure applies to all of the lines in the file.

Note that the end of service time cannot exceed 2000000000.









In a large city (several million inhabitants, but not more than a billion) there is one single barbershop with a small number of barbers ranging from 1 to 9. Each barber has his own number [1...9], to make it easier to organize the barbers work. In the barbershop, the time is counted in incremental time units from 1 till 2000000000, and the time counting starts from the moment that the barbershop opens.

Even though there are a lot of customers, every barber has to go on a break. The barber rests when the digit in the hundredths place position in the time variable corresponds to the the barbers own number, i.e. the barber with the number 5 will rest when the time variable is [500-599], [1500-1599], [2500-2599], etc. During the break, the barber is categorically forbidden from servicing a customer. In addition, if there is an unattended customer, a barber can't service him, unless he can finish the action before his break time starts. Therefore, the barber should not start serving the customer if the action cannot be finished until the break.

The customer must be serviced immediately if there is a free barber and has no restrictions (not being able to finish the action before his, the barbers, break time starts) on doing this job. The barber must try to service a customer in the next moment of time when he is finished.

More accurate specification: customer C1 arrives at time T1 and needs service time S1 (service time means that it will take S1 amount of time, for the customer to be serviced). There's a free barber B1. Accordingly, the service takes place at the time interval of [T1...T1+(S1-1)]. The service is finished at the time: T1 + S1-1. If client C2 has already arrived before or at exactly at the time moment T1 + S1, then the barber B1 can start servicing client C2 at the time T1 + S1.

Customers are waiting in an honest and "tight" (meaning punctual) line. Only one client can come in at a certain time moment. The receptionist (in the case of C++ and the context of this programming exercise, an algorithm) shall immediately determine the customers number (which corresponds to the customer order of arrival) that's between 1 and 200000 and the needed service time for the customer, that's between 1-900.

If there is an unserviced customer and several free barbers at the same time, then: preference is for the barber who has been without a customer for the longest amount of time (measured from the end time of the last serviced customer). Also, if two or more barbers have been waiting the same amount of time, then the barber who has the smaller number services the customer.

Knowing the arrival time, the number (customers number) and service time (duration of the service) of the customers, output the end of service moments time, the barbers number (who serviced the customer) and the customers number (the number of the customer, who was serviced). Outputting should be done sequentially, as in, according to the growing order of the time variable. If several clients service ends at the exact same time moment, then the result of these services are outputted according to the growing order of the barbers (that serviced these customers) numbers.

An example:
For the C++ program, we take in the input from a text file called hair.in and write the output inside another text file called hair.out.
The example input would look as follows:
2
11 1 10
21 2 50
31 3 20
0

The first line is the number of barbers inside the barbershop. The number is between 1 and 9. In the case of the example, there are 2 barbers in the barbershop.
The second line represents data about a customer: the first number is the arrival time of the customer (that's between 1 and 2000000000), the second number is the customers number (that's between 1 and 200000) and the third number is the needed service time (that's between 1 and 900).
This structure also applies to the third and fourth line.
The fifth line starts with a "0", which means, that the file has ended. This means, that whenever a line starts with a zero as the first number, the file has ended.

The output would be written to the text file hair.out.
The example output would look as follows:
20 1 1
50 1 3
70 2 2

Each line represents the output of a client being serviced and this action being finished: the first number is the end of service time (that would be calculated by T1+S1-1 formula, where T1 is the arrival time and S1 is the needed service time. Note, T1+S1-1 is T1 plus S1 minus 1. So, 11+10-1=20, which equals the first number of the first line.
The second number represents the barbers number (that serviced the customer), that's between 1 and 9. And the third line represents the clients number (who was serviced by the barber) that's between 1 and 200000. This structure applies to all of the lines in the file.

Note that the end of service time cannot exceed 2000000000.


I need you to make an algorithm that helps me solve this problem, as in, write the correct output to the hair.out file.
Here is the code i have written so far:
#include <iostream>
#include <fstream>
using namespace std;

// Definition of a Barber struct with an integer value and a pointer to the next Node. Used to construct a linked list.
struct Barber {
    int numB;
    Barber* next;
};

// Traverse the linked list and print out each value
void traverseList(Barber* head) {
    Barber* current = head;
    while (current != nullptr) {
        cout << current->numB << " ";
        current = current->next;
    }
}

// Delete the nodes in the linked list
void deleteList(Barber** headRef) {
    Barber* current = *headRef;
    while (current != nullptr) {
        Barber* temp = current;
        current = current->next;
        delete temp;
    }
    *headRef = nullptr;
}

// Creates a linked-list
void createList(Barber** headRef, int n) {
    *headRef = nullptr;

    // Create the linked list
    for (int i = 1; i <= n; i++) {
        Barber* newNode = new Barber;
        newNode->numB = i;
        newNode->next = nullptr;

        if (*headRef == nullptr) {
            *headRef = newNode;
        }
        else {
            Barber* current = *headRef;
            while (current->next != nullptr) {
                current = current->next;
            }
            current->next = newNode;
        }
    }
}

// Function to append a new node to the end of a linked-list.
void addElement(Barber** headRef, int numB) {
    Barber* newNode = new Barber;
    newNode->numB = numB;
    newNode->next = nullptr;

    if (*headRef == nullptr) {
        *headRef = newNode;
    }
    else {
        Barber* current = *headRef;
        while (current->next != nullptr) {
            current = current->next;
        }
        current->next = newNode;
    }
}

// Definition of a Client struct with three integer values and a pointer to the next Client.
struct Client {
    int time;
    int numC;
    int duration;
    Client* next;
};

// Traverse the linked list and print out each value
void traverseList(Client* head) {
    Client* current = head;
    while (current != nullptr) {
        cout << "Time: " << current->time << ", ";
        cout << "NumC: " << current->numC << ", ";
        cout << "Duration: " << current->duration << endl;
        current = current->next;
    }
}

// Delete the nodes in the linked list
void deleteList(Client** headRef) {
    Client* current = *headRef;
    while (current != nullptr) {
        Client* temp = current;
        current = current->next;
        delete temp;
    }
    *headRef = nullptr;
}

void appendToList(Client** headRef, int time, int numC, int duration) {
    Client* newNode = new Client;
    newNode->time = time;
    newNode->numC = numC;
    newNode->duration = duration;
    newNode->next = nullptr;

    if (*headRef == nullptr) {
        *headRef = newNode;
    }
    else {
        Client* current = *headRef;
        while (current->next != nullptr) {
            current = current->next;
        }
        current->next = newNode;
    }
}

// Definition of a OutputList struct with an integer value and a pointer to the next Node. Used to construct a linked list.
struct OutputList {
    int spentTime;
    int barberNum;
    int clientNum;
    OutputList* next;
};

void traverseList(OutputList* head) {
    OutputList* current = head;
    while (current != nullptr) {
        cout << "Spent Time: " << current->spentTime << ", ";
        cout << "Barber Num: " << current->barberNum << ", ";
        cout << "Client Num: " << current->clientNum << endl;
        current = current->next;
    }
}

void addElement(OutputList** headRef, int spentTime, int barberNum, int clientNum) {
    OutputList* newNode = new OutputList;
    newNode->spentTime = spentTime;
    newNode->barberNum = barberNum;
    newNode->clientNum = clientNum;
    newNode->next = nullptr;

    if (*headRef == nullptr) {
        *headRef = newNode;
    }
    else {
        OutputList* current = *headRef;
        while (current->next != nullptr) {
            current = current->next;
        }
        current->next = newNode;
    }
}

void deleteList(OutputList** headRef) {
    OutputList* current = *headRef;
    while (current != nullptr) {
        OutputList* temp = current;
        current = current->next;
        delete temp;
    }
    *headRef = nullptr;
}

int main() {
    // CONSTANTS
    long int MAX_TIME = 2000000000;
    cout << "Max time: " << MAX_TIME << endl;

    // Open the files
    ifstream input("hair.in");
    ofstream output("hair.out");

    // Check if the file was opened successfully
    if (!input.is_open())
    {
        cout << "Failed to open input file." << endl;
        return 1;
    }
    if (!output.is_open())
    {
        cout << "Failed to open output file." << endl;
        return 1;
    }

    int n;
    input >> n;
    if (n < 1 || n>9){
        cout << "Number of barbers has be between 1-9." << endl;
        return 1;  
    } 
    // Output the first line to the console
    cout << "The number of barbers: " << n << endl;

    // Create a linked list of barbers
    Barber* head = nullptr;
    createList(&head, n);
    traverseList(head);
    cout << endl;
    
    // Create a linked list of clients
    Client* head1 = nullptr; 
    int time; 
    int num; 
    int duration;
    while (input >> time >> num >> duration) {
        if (time == 0) break;
        if (num >= 1 && num <= 200000 && duration >= 1 && duration <= 900) {
            appendToList(&head1, time, num, duration);
        } else {
            cout << "Error: Invalid input value for num or duration." << endl;
            return 1;
        }
    }
    traverseList(head1);

    // Close the input file
    input.close();

    OutputList* head2 = nullptr;
    while (true)
    {
        /* algorithm code */
        break;
    }

    // Traverse the list and write values to file
    OutputList* current = head2;
    while (current != nullptr) {
        output << current->spentTime << " ";
        output << current->barberNum << " ";
        output << current->clientNum << endl;
        current = current->next;
    }

    // Close the output file
    output.close();

    // Free memory
    deleteList(&head);
    deleteList(&head1);
    deleteList(&head2);
    return 0;
}
You'll notice the while loop, with the comment "/* algorithm code */". This, is where i would need your help building the algorithm. We cant use any other library other than fstream or iostream, so we cant use data structures like queue or vector.